// ----------------------------------------------------------
// Title: Find First and Last Occurrence of an Element (Binary Search)
// Author: Mazhar Akhtar Ansari
// Description:
//     This program finds the first and last occurrence of a given
//     key in a sorted array using modified binary search.
//     It demonstrates how binary search can be adapted for
//     multiple use-cases beyond simple searching.
//
// Algorithm Idea:
//     1. Perform a standard binary search.
//     2. When the key is found:
//          - For the FIRST occurrence → move left (end = mid - 1).
//          - For the LAST occurrence → move right (start = mid + 1).
// ----------------------------------------------------------

#include <stdio.h>

// Function prototypes
int firstOcc(int arr[], int size, int key);
int lastOcc(int arr[], int size, int key);

// ----------------------------------------------------------
// firstOcc()
// Returns the index of the FIRST occurrence of the given key.
// If not found, returns -1.
// ----------------------------------------------------------
int firstOcc(int arr[], int size, int key) {
    int start = 0;
    int end = size - 1;
    int ans = -1;

    while (start <= end) {
        int mid = start + (end - start) / 2;

        if (arr[mid] == key) {
            ans = mid;        // potential answer found
            end = mid - 1;    // continue searching on the left side
        }
        else if (key < arr[mid]) {
            end = mid - 1;
        }
        else {
            start = mid + 1;
        }
    }

    return ans;
}

// ----------------------------------------------------------
// lastOcc()
// Returns the index of the LAST occurrence of the given key.
// If not found, returns -1.
// ----------------------------------------------------------
int lastOcc(int arr[], int size, int key) {
    int start = 0;
    int end = size - 1;
    int ans = -1;

    while (start <= end) {
        int mid = start + (end - start) / 2;

        if (arr[mid] == key) {
            ans = mid;        // potential answer found
            start = mid + 1;  // continue searching on the right side
        }
        else if (key < arr[mid]) {
            end = mid - 1;
        }
        else {
            start = mid + 1;
        }
    }

    return ans;
}

// ----------------------------------------------------------
// main()
// Entry point of the program.
// ----------------------------------------------------------
int main() {
    int arr[] = {1, 2, 4, 5, 6, 6, 6, 7, 8};
    int key = 6;
    int size = sizeof(arr) / sizeof(arr[0]);

    int first = firstOcc(arr, size, key);
    int last = lastOcc(arr, size, key);

    if (first == -1) {
        printf("Element %d not found in the array.\n", key);
    } else {
        printf("Element %d found.\n", key);
        printf("First occurrence at index: %d\n", first);
        printf("Last occurrence at index:  %d\n", last);
    }

    return 0;
}
