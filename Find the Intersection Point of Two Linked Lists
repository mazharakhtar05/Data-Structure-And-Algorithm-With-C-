*/
ðŸ§  Problem Statement

Given the heads of two singly linked lists, return the node where the two lists intersect.
If the two linked lists have no intersection, return NULL.

âœ¨ Example
Input:
List A: 4 -> 1 -> 8 -> 4 -> 5  
List B: 5 -> 6 -> 1 -> 8 -> 4 -> 5  
Output: 8

/*

#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node(int val) : data(val), next(NULL) {}
};

int getLength(Node* head) {
    int len = 0;
    while(head) {
        len++;
        head = head->next;
    }
    return len;
}

Node* getIntersectionNode(Node* headA, Node* headB) {
    int lenA = getLength(headA);
    int lenB = getLength(headB);
    while(lenA > lenB) {
        headA = headA->next;
        lenA--;
    }
    while(lenB > lenA) {
        headB = headB->next;
        lenB--;
    }
    while(headA && headB) {
        if(headA == headB) return headA;
        headA = headA->next;
        headB = headB->next;
    }
    return NULL;
}

int main() {
    Node* common = new Node(8);
    common->next = new Node(4);
    common->next->next = new Node(5);

    Node* headA = new Node(4);
    headA->next = new Node(1);
    headA->next->next = common;

    Node* headB = new Node(5);
    headB->next = new Node(6);
    headB->next->next = new Node(1);
    headB->next->next->next = common;

    Node* intersection = getIntersectionNode(headA, headB);
    if(intersection)
        cout << "Intersection Node: " << intersection->data << endl;
    else
        cout << "No intersection." << endl;

    return 0;
}
