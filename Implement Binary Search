/*
Problem Statement

Given a sorted array of integers and a target value, return the index of the target if it is found.
If not found, return -1.

You must implement it using the binary search algorithm (O(log n) time complexity).

Example
Input: nums = [-1, 0, 3, 5, 9, 12], target = 9  
Output: 4

Input: nums = [-1, 0, 3, 5, 9, 12], target = 2  
Output: -1

*/

#include <iostream>
#include <vector>
using namespace std;

int binarySearch(vector<int>& nums, int target) {
    int left = 0, right = nums.size() - 1;
    while(left <= right) {
        int mid = left + (right - left) / 2;
        if(nums[mid] == target) return mid;
        else if(nums[mid] < target) left = mid + 1;
        else right = mid - 1;
    }
    return -1;
}

int main() {
    vector<int> nums = {-1, 0, 3, 5, 9, 12};
    int target = 9;
    cout << "Target index: " << binarySearch(nums, target) << endl;
    return 0;
}
